version: "3.9"
volumes:
  volume1:
services:
  # Kafka
  kafka1:
    image: 'bitnami/kafka:latest'
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
    volumes:
      - volume1:/bitnami/kafka
    networks:
      - digital-trade

  ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka1:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    depends_on:
      - kafka1
    networks:
      - digital-trade
  
  # Clients
  clients-service:
    image: clients-service:latest
    build:
      context: ./services/DigitalTrade.Clients
      dockerfile: Dockerfile
    container_name: clients-service
    depends_on:
      clients-service-db:
        condition: service_healthy
      clients-service-migration:
        condition: service_completed_successfully
    volumes:
      - ./clients/appsettings.json:/src/appsettings.json
    ports:
      - "2000:80"
    environment:
      - Kafka__Servers=kafka1:9092
    networks:
      - digital-trade
  
  clients-service-migration:
    build:
      context: ./services/DigitalTrade.Clients
      dockerfile: Dockerfile-migration
    image: clients-service-migration:latest
    container_name: clients-service-migration
    depends_on:
      clients-service-db:
        condition: service_healthy
    volumes:
      - ./clients/appsettings.json:/src/appsettings.json
    networks:
      - digital-trade

  clients-service-db:
    image: postgres:latest
    container_name: clients-service-db
    ports:
      - "6432:5432"
    environment:
      POSTGRES_DB: "clients"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGUSER: "postgres"
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - digital-trade

  # Ordering
  ordering-service:
    image: ordering-service:latest
    build:
      context: ./services/DigitalTrade.Ordering
      dockerfile: Dockerfile
    container_name: ordering-service
    depends_on:
      ordering-service-db:
        condition: service_healthy
      ordering-service-migration:
        condition: service_completed_successfully
    volumes:
      - ./ordering/appsettings.json:/src/appsettings.json
    ports:
      - "2010:90"
    environment:
      - Kafka__Servers=kafka1:9092
    networks:
      - digital-trade

  ordering-service-migration:
    build:
      context: ./services/DigitalTrade.Ordering
      dockerfile: Dockerfile-migration
    image: ordering-service-migration:latest
    container_name: ordering-service-migration
    depends_on:
      ordering-service-db:
        condition: service_healthy
    volumes:
      - ./ordering/appsettings.json:/src/appsettings.json
    networks:
      - digital-trade

  ordering-service-db:
    image: postgres:latest
    container_name: ordering-service-db
    ports:
      - "6433:5432"
    environment:
      POSTGRES_DB: "ordering"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGUSER: "postgres"
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - digital-trade
  
  # Catalog
  catalog-service:
    image: catalog-service:latest
    build:
      context: ./services/DigitalTrade.Catalog
      dockerfile: Dockerfile
    container_name: catalog-service
    depends_on:
      catalog-service-db:
        condition: service_healthy
      catalog-service-migration:
        condition: service_completed_successfully
    volumes:
      - ./catalog/appsettings.json:/src/appsettings.json
    ports:
      - "2020:100"
    environment:
      - Kafka__Servers=kafka1:9092
    networks:
      - digital-trade
  
  catalog-service-migration:
    build:
      context: ./services/DigitalTrade.Catalog
      dockerfile: Dockerfile-migration
    image: catalog-service-migration:latest
    container_name: catalog-service-migration
    depends_on:
      catalog-service-db:
        condition: service_healthy
    volumes:
      - ./catalog/appsettings.json:/src/appsettings.json
    networks:
      - digital-trade

  catalog-service-db:
    image: postgres:latest
    container_name: catalog-service-db
    ports:
      - "6434:5432"
    environment:
      POSTGRES_DB: "catalog"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGUSER: "postgres"
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - digital-trade
  
  # Basket
  basket-service:
    image: basket-service:latest
    build:
      context: ./services/DigitalTrade.Basket
      dockerfile: Dockerfile
    container_name: basket-service
    depends_on:
      basket-service-db:
        condition: service_healthy
      basket-service-migration:
        condition: service_completed_successfully
    volumes:
      - ./basket/appsettings.json:/src/appsettings.json
    ports:
      - "2030:110"
    environment:
      - Kafka__Servers=kafka1:9092
    networks:
      - digital-trade
  
  basket-service-migration:
    build:
      context: ./services/DigitalTrade.Basket
      dockerfile: Dockerfile-migration
    image: basket-service-migration:latest
    container_name: basket-service-migration
    depends_on:
      basket-service-db:
        condition: service_healthy
    volumes:
      - ./basket/appsettings.json:/src/appsettings.json
    networks:
      - digital-trade

  basket-service-db:
    image: postgres:latest
    container_name: basket-service-db
    ports:
      - "6435:5432"
    environment:
      POSTGRES_DB: "basket"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGUSER: "postgres"
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - digital-trade
networks:
  digital-trade:
    name: "digital-trade"